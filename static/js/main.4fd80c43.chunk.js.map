{"version":3,"sources":["VideoSection.js","App.js","reportWebVitals.js","index.js"],"names":["VideoSection","props","canvasRef","React","createRef","state","input","canvas","console","log","this","setState","id","width","height","ref","createCanvas","evt","target","value","firestore","firebase","pc","RTCPeerConnection","iceServers","urls","iceCandidatePoolSize","localStream","remoteStream","Promise","all","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","ageGenderNet","then","handleWebcamButton","a","navigator","mediaDevices","getUserMedia","video","audio","err","MediaStream","getTracks","forEach","track","addTrack","ontrack","event","streams","webcamSrc","srcObject","remoteSrc","displaySize","setInterval","withFaceLandmarks","withFaceExpressions","withAgeAndGender","detections","resizedDetections","current","getContext","clearRect","drawDetections","drawFaceLandmarks","drawFaceExpressions","detection","box","DrawBox","label","Math","round","age","gender","draw","length","handleCallButton","callDoc","collection","doc","offerCandidates","answerCandidates","onicecandidate","candidate","add","toJSON","createOffer","offerDescription","setLocalDescription","offer","sdp","type","set","onSnapshot","snapshot","data","currentRemoteDescription","answer","answerDescription","RTCSessionDescription","setRemoteDescription","docChanges","change","RTCIceCandidate","addIceCandidate","handleAnswerButton","callId","get","callData","createAnswer","update","autoPlay","playsInline","onClick","onChange","updateInputValue","Component","App","apps","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,UAAYC,IAAMC,YACvB,EAAKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IALO,E,gDASnB,WACEC,QAAQC,IAAI,iBACZC,KAAKC,SAAS,CACZJ,OAAQ,wBAAQK,GAAG,SAASC,MAAM,MAAMC,OAAO,MAAMC,IAAKL,KAAKR,gB,+BAGnE,WACEQ,KAAKM,iB,8BAGP,SAAiBC,GACfP,KAAKC,SAAS,CACZL,MAAOW,EAAIC,OAAOC,U,oBAItB,WAAU,IAAD,OACDC,EAAYC,IAASD,YAarBE,EAAK,IAAIC,kBAVC,CACdC,WAAY,CACV,CACEC,KAAM,CAAC,gCAAiC,mCAG5CC,qBAAsB,KAMpBC,EAAc,KACdC,EAAe,KAEnBC,QAAQC,IAAI,CAEVC,IAAaC,iBAAiBC,YAAY,WAC1CF,IAAaG,kBAAkBD,YAAY,WAC3CF,IAAaI,mBAAmBF,YAAY,WAC5CF,IAAaK,kBAAkBH,YAAY,WAC3CF,IAAaM,aAAaJ,YAAY,aACrCK,KAAK9B,QAAQC,IAAI,mBAGpB,IAAI8B,EAAkB,uCAAG,4BAAAC,EAAA,sEACHC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAAS,SAACC,GACtFtC,QAAQC,IAAIqC,MAFS,OACvBnB,EADuB,OAIvBC,EAAe,IAAImB,YAGnBpB,EAAYqB,YAAYC,SAAQ,SAACC,GAC/B5B,EAAG6B,SAASD,EAAOvB,MAIrBL,EAAG8B,QAAU,SAACC,GACZA,EAAMC,QAAQ,GAAGN,YAAYC,SAAQ,SAACC,GACpCtB,EAAauB,SAASD,OAK1B,EAAKK,UAAUC,UAAY7B,EAC3B,EAAK8B,UAAUD,UAAY5B,EAGrB8B,EAAc,CAAE7C,MAAO,IAAKC,OAAQ,KAG1C6C,YAAW,sBAAC,8BAAAnB,EAAA,sEACeT,IACP,EAAKwB,UAAW,IAAIxB,KACnC6B,oBACAC,sBACAC,mBALO,OACJC,EADI,OAMJC,EAAoBjC,IAAsBgC,EAAYL,GAC5D,EAAKxD,UAAU+D,QAAQC,WAAW,MAAMC,UAAU,EAAG,EAAG,IAAK,KAC7DpC,IAAaqC,eAAe,EAAKlE,UAAU+D,QAASD,GACpDjC,IAAasC,kBAAkB,EAAKnE,UAAU+D,QAASD,GACvDjC,IAAauC,oBAAoB,EAAKpE,UAAU+D,QAASD,GACzDA,EAAkBf,SAAQ,SAACsB,GACzB,IAAMC,EAAMD,EAAUA,UAAUC,IAChB,IAAIzC,IAAa0C,QAAQD,EAAK,CAAEE,MAAOC,KAAKC,MAAML,EAAUM,KAAO,aAAeN,EAAUO,SACpGC,KAAK,EAAK7E,UAAU+D,YAGR,IAAtBF,EAAWiB,OAAexE,QAAQC,IAAIsD,GAAcvD,QAAQC,IAAI,oBAjBtD,4CAkBT,KA5CoB,4CAAH,qDAgDlBwE,EAAgB,uCAAG,oCAAAzC,EAAA,6DACf0C,EAAU9D,EAAU+D,WAAW,SAASC,MACxCC,EAAkBH,EAAQC,WAAW,mBACrCG,EAAmBJ,EAAQC,WAAW,oBAE5C,EAAKxE,SAAS,CACZL,MAAO4E,EAAQtE,KAIjBU,EAAGiE,eAAiB,SAAClC,GACnBA,EAAMmC,WAAaH,EAAgBI,IAAIpC,EAAMmC,UAAUE,WAXpC,SAcUpE,EAAGqE,cAdb,cAcfC,EAde,iBAeftE,EAAGuE,oBAAoBD,GAfR,eAiBfE,EAAQ,CACZC,IAAKH,EAAiBG,IACtBC,KAAMJ,EAAiBI,MAnBJ,UAsBfd,EAAQe,IAAI,CAAEH,UAtBC,QAyBrBZ,EAAQgB,YAAW,SAACC,GAClB,IAAMC,EAAOD,EAASC,OACtB,IAAK9E,EAAG+E,2BAAJ,OAAgCD,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAME,QAAQ,CAChD,IAAMC,EAAoB,IAAIC,sBAAsBJ,EAAKE,QACzDhF,EAAGmF,qBAAqBF,OAM5BjB,EAAiBY,YAAW,SAACC,GAC3BA,EAASO,aAAazD,SAAQ,SAAC0D,GAC7B,GAAoB,UAAhBA,EAAOX,KAAkB,CAC3B,IAAMR,EAAY,IAAIoB,gBAAgBD,EAAOvB,IAAIgB,QACjD9E,EAAGuF,gBAAgBrB,UAvCJ,4CAAH,qDA6ChBsB,EAAkB,uCAAG,0CAAAtE,EAAA,6DACjBuE,EAAS,EAAK1G,MAAMC,MACpB4E,EAAU9D,EAAU+D,WAAW,SAASC,IAAI2B,GAC5CzB,EAAmBJ,EAAQC,WAAW,oBACtCE,EAAkBH,EAAQC,WAAW,mBAE3C7D,EAAGiE,eAAiB,SAAClC,GACnBA,EAAMmC,WAAaF,EAAiBG,IAAIpC,EAAMmC,UAAUE,WAPnC,SAYCR,EAAQ8B,MAZT,cAYjBC,EAZiB,OAYgBb,OAEjCR,EAAmBqB,EAASnB,MAdX,UAejBxE,EAAGmF,qBAAqB,IAAID,sBAAsBZ,IAfjC,yBAiBStE,EAAG4F,eAjBZ,eAiBjBX,EAjBiB,iBAkBjBjF,EAAGuE,oBAAoBU,GAlBN,eAoBjBD,EAAS,CACbN,KAAMO,EAAkBP,KACxBD,IAAKQ,EAAkBR,KAtBF,UAyBjBb,EAAQiC,OAAO,CAAEb,WAzBA,QA6BvBjB,EAAgBa,YAAW,SAACC,GAC1BA,EAASO,aAAazD,SAAQ,SAAC0D,GAE7B,GADAnG,QAAQC,IAAIkG,EAAOvB,IAAIgB,QACH,UAAhBO,EAAOX,KAAkB,CAC3B,IAAII,EAAOO,EAAOvB,IAAIgB,OACtB9E,EAAGuF,gBAAgB,IAAID,gBAAgBR,WAlCtB,4CAAH,qDAwCtB,OACE,gCACE,+CACA,8CACA,iCACE,uCACC1F,KAAKL,MAAME,OACZ,uBACEM,MAAM,MACNC,OAAO,MACPC,IAAK,SAACwC,GACJ,EAAKA,UAAYA,GAEnB6D,UAAQ,EACRC,aAAW,OAGf,iCACE,wCAEA,uBACEtG,IAAK,SAAC0C,GACJ,EAAKA,UAAYA,GAEnB2D,UAAQ,EACRC,aAAW,OAIf,wBAAQC,QAAS/E,EAAjB,0BACA,iDACA,wBAAQ+E,QAASrC,EAAjB,iCACA,6CACA,uBAAO9D,MAAOT,KAAKL,MAAMC,MAAOiH,SAAU,SAACtG,GAAD,OAAS,EAAKuG,iBAAiBvG,MACzE,wBAAQqG,QAASR,EAAjB,oBACA,mD,GA/NkCW,aCuB3BC,MAxBf,WAiBE,OALKrG,IAASsG,KAAK3C,QACjB3D,IAASuG,cAXY,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBASf,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCXSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjG,MAAK,YAAkD,IAA/CkG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4fd80c43.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport * as faceapi from \"face-api.js\";\n\nexport default class VideoSection extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      input: \"\",\n      canvas: [],\n    };\n  }\n\n  createCanvas() {\n    console.log(\"Create Canvas\");\n    this.setState({\n      canvas: <canvas id=\"canvas\" width=\"640\" height=\"480\" ref={this.canvasRef}></canvas>,\n    });\n  }\n  componentDidMount() {\n    this.createCanvas();\n  }\n\n  updateInputValue(evt) {\n    this.setState({\n      input: evt.target.value,\n    });\n  }\n\n  render() {\n    const firestore = firebase.firestore();\n    // GLOBALS -> these are globals that should be used in multiple components in realit y we should use something like redux to handle these globals\n    // Stun Servers\n    const servers = {\n      iceServers: [\n        {\n          urls: [\"stun:stun1.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"],\n        },\n      ],\n      iceCandidatePoolSize: 10,\n    };\n\n    // Creata a new peer connection\n    const pc = new RTCPeerConnection(servers);\n\n    let localStream = null;\n    let remoteStream = null;\n\n    Promise.all([\n      // Facial Recognition\n      faceapi.nets.tinyFaceDetector.loadFromUri(\"/models\"),\n      faceapi.nets.faceLandmark68Net.loadFromUri(\"/models\"),\n      faceapi.nets.faceRecognitionNet.loadFromUri(\"/models\"),\n      faceapi.nets.faceExpressionNet.loadFromUri(\"/models\"),\n      faceapi.nets.ageGenderNet.loadFromUri(\"/models\"),\n    ]).then(console.log(\"Loaded faceapi\"));\n\n    // Starting the local webcam\n    let handleWebcamButton = async () => {\n      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false }, (err) => {\n        console.log(err);\n      });\n      remoteStream = new MediaStream();\n\n      // Push tracks from local stream to peer connection\n      localStream.getTracks().forEach((track) => {\n        pc.addTrack(track, localStream);\n      });\n\n      // Pull tracks from remote stream, add to video stream\n      pc.ontrack = (event) => {\n        event.streams[0].getTracks().forEach((track) => {\n          remoteStream.addTrack(track);\n        });\n      };\n\n      //set webcamVideo src on html to localStream\n      this.webcamSrc.srcObject = localStream;\n      this.remoteSrc.srcObject = remoteStream;\n\n      // todo change weidth height to be dynamic\n      const displaySize = { width: 640, height: 480 };\n      //   faceapi.matchDimensions(this.state.canvas, displaySize);\n\n      setInterval(async () => {\n        const detections = await faceapi\n          .detectAllFaces(this.webcamSrc, new faceapi.TinyFaceDetectorOptions())\n          .withFaceLandmarks()\n          .withFaceExpressions()\n          .withAgeAndGender();\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\n        this.canvasRef.current.getContext(\"2d\").clearRect(0, 0, 640, 480);\n        faceapi.draw.drawDetections(this.canvasRef.current, resizedDetections);\n        faceapi.draw.drawFaceLandmarks(this.canvasRef.current, resizedDetections);\n        faceapi.draw.drawFaceExpressions(this.canvasRef.current, resizedDetections);\n        resizedDetections.forEach((detection) => {\n          const box = detection.detection.box;\n          const drawBox = new faceapi.draw.DrawBox(box, { label: Math.round(detection.age) + \" year old \" + detection.gender });\n          drawBox.draw(this.canvasRef.current);\n        });\n\n        detections.length !== 0 ? console.log(detections) : console.log(\"No face detected\");\n      }, 150);\n    };\n\n    // Create a new offer\n    let handleCallButton = async () => {\n      const callDoc = firestore.collection(\"calls\").doc();\n      const offerCandidates = callDoc.collection(\"offerCandidates\");\n      const answerCandidates = callDoc.collection(\"answerCandidates\");\n\n      this.setState({\n        input: callDoc.id, // Generate some call id and store it in input\n      });\n\n      // Get candidate for the caller\n      pc.onicecandidate = (event) => {\n        event.candidate && offerCandidates.add(event.candidate.toJSON());\n      };\n      //create an offer\n      const offerDescription = await pc.createOffer();\n      await pc.setLocalDescription(offerDescription);\n\n      const offer = {\n        sdp: offerDescription.sdp,\n        type: offerDescription.type,\n      };\n\n      await callDoc.set({ offer });\n\n      // Listen for answer from the user\n      callDoc.onSnapshot((snapshot) => {\n        const data = snapshot.data();\n        if (!pc.currentRemoteDescription && data?.answer) {\n          const answerDescription = new RTCSessionDescription(data.answer);\n          pc.setRemoteDescription(answerDescription);\n        }\n      });\n\n      // When answered add candidate to the peer connection\n\n      answerCandidates.onSnapshot((snapshot) => {\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            const candidate = new RTCIceCandidate(change.doc.data());\n            pc.addIceCandidate(candidate);\n          }\n        });\n      });\n    };\n\n    let handleAnswerButton = async () => {\n      const callId = this.state.input;\n      const callDoc = firestore.collection(\"calls\").doc(callId);\n      const answerCandidates = callDoc.collection(\"answerCandidates\");\n      const offerCandidates = callDoc.collection(\"offerCandidates\");\n\n      pc.onicecandidate = (event) => {\n        event.candidate && answerCandidates.add(event.candidate.toJSON());\n      };\n\n      // Fetch data, then set the offer & answer\n\n      const callData = (await callDoc.get()).data();\n\n      const offerDescription = callData.offer;\n      await pc.setRemoteDescription(new RTCSessionDescription(offerDescription));\n\n      const answerDescription = await pc.createAnswer();\n      await pc.setLocalDescription(answerDescription);\n\n      const answer = {\n        type: answerDescription.type,\n        sdp: answerDescription.sdp,\n      };\n\n      await callDoc.update({ answer });\n\n      // Listen to offer candidates\n\n      offerCandidates.onSnapshot((snapshot) => {\n        snapshot.docChanges().forEach((change) => {\n          console.log(change.doc.data());\n          if (change.type === \"added\") {\n            let data = change.doc.data();\n            pc.addIceCandidate(new RTCIceCandidate(data));\n          }\n        });\n      });\n    };\n\n    return (\n      <div>\n        <h1>Video Section</h1>\n        <h1>Web RTC Demo</h1>\n        <span>\n          <h3>Local</h3>\n          {this.state.canvas}\n          <video\n            width=\"640\"\n            height=\"480\"\n            ref={(webcamSrc) => {\n              this.webcamSrc = webcamSrc;\n            }}\n            autoPlay\n            playsInline\n          ></video>\n        </span>\n        <span>\n          <h3>Remote</h3>\n\n          <video\n            ref={(remoteSrc) => {\n              this.remoteSrc = remoteSrc;\n            }}\n            autoPlay\n            playsInline\n          ></video>\n        </span>\n\n        <button onClick={handleWebcamButton}>Start webcam</button>\n        <h2>Create new call</h2>\n        <button onClick={handleCallButton}>Create Call (offer)</button>\n        <h2>Join a Call</h2>\n        <input value={this.state.input} onChange={(evt) => this.updateInputValue(evt)}></input>\n        <button onClick={handleAnswerButton}>Answer</button>\n        <button>Hangup</button>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport firebase from \"firebase/compat/app\";\nimport VideoSection from \"./VideoSection\";\n\nfunction App() {\n  //#region Firebase Setup\n  const firebaseConfig = {\n    apiKey: \"AIzaSyCn_oUCgU-s21Nxe1OuOSrDDhsxROIkewc\",\n    authDomain: \"webrtcdemo-d01e1.firebaseapp.com\",\n    projectId: \"webrtcdemo-d01e1\",\n    storageBucket: \"webrtcdemo-d01e1.appspot.com\",\n    messagingSenderId: \"327532271316\",\n    appId: \"1:327532271316:web:cca5d6b076578764f94d41\",\n    measurementId: \"G-K3SR1DN4Z1\",\n  };\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n  }\n  //#endregion\n\n  return (\n    <div className=\"App\">\n      <VideoSection />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}